type CurrentUserPermission {
  permission: String!
  contentScopes: [JSONObject!]!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Dependency {
  rootId: String!
  rootGraphqlObjectType: String!
  rootColumnName: String!
  jsonPath: String!
  visible: Boolean!
  targetGraphqlObjectType: String!
  targetId: String!
  name: String
  secondaryInformation: String
}

type ImageCropArea {
  focalPoint: FocalPoint!
  width: Float
  height: Float
  x: Float
  y: Float
}

enum FocalPoint {
  SMART
  CENTER
  NORTHWEST
  NORTHEAST
  SOUTHWEST
  SOUTHEAST
}

type User {
  id: String!
  name: String!
  email: String!
  language: String!
}

type BrevoApiCampaignStatistics {
  """Number of unique clicks for the campaign"""
  uniqueClicks: Int!

  """Number of total clicks for the campaign"""
  clickers: Int!

  """Number of complaints (Spam reports) for the campaign"""
  complaints: Int!

  """Number of delivered emails for the campaign"""
  delivered: Int!

  """Number of sent emails for the campaign"""
  sent: Int!

  """Number of softbounce for the campaign"""
  softBounces: Int!

  """Number of hardbounces for the campaign"""
  hardBounces: Int!

  """Number of unique openings for the campaign"""
  uniqueViews: Int!

  """Number of unique openings for the campaign"""
  trackableViews: Int!

  """
  Rate of recipients without any privacy protection option enabled in their email client, applied to all delivered emails
  """
  estimatedViews: Int!

  """Number of unsubscription for the campaign"""
  unsubscriptions: Int!

  """Number of openings for the campaign"""
  viewed: Int!
}

type EmailCampaignContentScope {
  thisScopeHasNoFields____: String
}

type BrevoContact {
  id: Int!
  createdAt: String!
  modifiedAt: String!
  email: String!
  emailBlacklisted: Boolean!
  smsBlacklisted: Boolean!
  listIds: [Int!]!
  listUnsubscribed: [Int!]!
}

type PaginatedBrevoContacts {
  nodes: [BrevoContact!]!
  totalCount: Int!
}

type TargetGroup implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  title: String!
  isMainList: Boolean!
  brevoId: Int!
  totalSubscribers: Int!
  totalContactsBlocked: Int!
  scope: EmailCampaignContentScope!
}

interface DocumentInterface {
  id: ID!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatedTargetGroups {
  nodes: [TargetGroup!]!
  totalCount: Int!
}

type EmailCampaign implements DocumentInterface {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  title: String!
  subject: String!
  brevoId: Int
  sendingState: SendingState!
  scheduledAt: DateTime
  targetGroup: TargetGroup
  content: EmailCampaignContentBlockData!
  scope: EmailCampaignContentScope!
}

enum SendingState {
  DRAFT
  SENT
  SCHEDULED
}

"""EmailCampaignContent root block data"""
scalar EmailCampaignContentBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type PaginatedEmailCampaigns {
  nodes: [EmailCampaign!]!
  totalCount: Int!
}

input EmailCampaignContentScopeInput {
  thisScopeHasNoFields____: String
}

type Query {
  brevoContact(id: Int!): BrevoContact!
  brevoContacts(targetGroupId: ID, email: String, scope: EmailCampaignContentScopeInput!, offset: Int! = 0, limit: Int! = 25): PaginatedBrevoContacts!
  targetGroup(id: ID!): TargetGroup!
  targetGroups(scope: EmailCampaignContentScopeInput!, search: String, filter: TargetGroupFilter, sort: [TargetGroupSort!], offset: Int! = 0, limit: Int! = 25): PaginatedTargetGroups!
  emailCampaign(id: ID!): EmailCampaign!
  emailCampaigns(scope: EmailCampaignContentScopeInput!, search: String, filter: EmailCampaignFilter, sort: [EmailCampaignSort!], offset: Int! = 0, limit: Int! = 25): PaginatedEmailCampaigns!
  emailCampaignStatistics(id: ID!): BrevoApiCampaignStatistics
}

input TargetGroupFilter {
  createdAt: DateFilter
  updatedAt: DateFilter
  title: StringFilter
  and: [TargetGroupFilter!]
  or: [TargetGroupFilter!]
}

input DateFilter {
  equal: DateTime
  lowerThan: DateTime
  greaterThan: DateTime
  lowerThanEqual: DateTime
  greaterThanEqual: DateTime
  notEqual: DateTime
}

input StringFilter {
  contains: String
  startsWith: String
  endsWith: String
  equal: String
  notEqual: String
}

input TargetGroupSort {
  field: TargetGroupSortField!
  direction: SortDirection! = ASC
}

enum TargetGroupSortField {
  createdAt
  updatedAt
  title
}

enum SortDirection {
  ASC
  DESC
}

input EmailCampaignFilter {
  createdAt: DateFilter
  updatedAt: DateFilter
  title: StringFilter
  subject: StringFilter
  scheduledAt: DateFilter
  and: [EmailCampaignFilter!]
  or: [EmailCampaignFilter!]
}

input EmailCampaignSort {
  field: EmailCampaignSortField!
  direction: SortDirection! = ASC
}

enum EmailCampaignSortField {
  createdAt
  updatedAt
  title
  subject
  scheduledAt
}

type Mutation {
  updateBrevoContact(id: Int!, input: BrevoContactUpdateInput!): BrevoContact!
  deleteBrevoContact(id: Int!): Boolean!
  subscribeBrevoContact(input: SubscribeInput!): SubscribeResponse!
  createTargetGroup(scope: EmailCampaignContentScopeInput!, input: TargetGroupInput!): TargetGroup!
  updateTargetGroup(id: ID!, input: TargetGroupUpdateInput!, lastUpdatedAt: DateTime): TargetGroup!
  deleteTargetGroup(id: ID!): Boolean!
  createEmailCampaign(scope: EmailCampaignContentScopeInput!, input: EmailCampaignInput!): EmailCampaign!
  updateEmailCampaign(id: ID!, input: EmailCampaignUpdateInput!, lastUpdatedAt: DateTime): EmailCampaign!
  deleteEmailCampaign(id: ID!): Boolean!
  sendEmailCampaignNow(id: ID!): Boolean!
  sendEmailCampaignToTestEmails(id: ID!, data: SendTestEmailCampaignArgs!): Boolean!
}

input BrevoContactUpdateInput {
  blocked: Boolean!
}

enum SubscribeResponse {
  SUCCESSFUL
  ERROR_UNKNOWN
  ERROR_CONTAINED_IN_ECG_RTR_LIST
}

input SubscribeInput {
  email: String!
  redirectionUrl: String!
  scope: EmailCampaignContentScopeInput!
}

input TargetGroupInput {
  title: String!
  filters: BrevoContactFilterAttributesInput
}

input BrevoContactFilterAttributesInput {
  thisFilterHasNoFields____: [String!]
}

input TargetGroupUpdateInput {
  title: String
  filters: BrevoContactFilterAttributesInput
}

input EmailCampaignInput {
  title: String!
  subject: String!
  scheduledAt: DateTime
  targetGroup: ID
  content: EmailCampaignContentBlockInput!
}

"""EmailCampaignContent root block input"""
scalar EmailCampaignContentBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input EmailCampaignUpdateInput {
  title: String
  subject: String
  scheduledAt: DateTime
  targetGroup: ID
  content: EmailCampaignContentBlockInput
}

input SendTestEmailCampaignArgs {
  emails: [String!]!
}
